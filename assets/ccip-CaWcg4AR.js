import{aF as d,aG as m,aH as y,aI as g,aJ as O,aK as k,aL as L,aM as E,aN as h,aO as x}from"./index-B8EwGL3f.js";class R extends d{constructor({callbackSelector:t,cause:e,data:n,extraData:o,sender:c,urls:r}){super(e.shortMessage||"An error occurred while fetching for an offchain result.",{cause:e,metaMessages:[...e.metaMessages||[],e.metaMessages?.length?"":[],"Offchain Gateway Call:",r&&["  Gateway URL(s):",...r.map(u=>`    ${m(u)}`)],`  Sender: ${c}`,`  Data: ${n}`,`  Callback selector: ${t}`,`  Extra data: ${o}`].flat()}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupError"})}}class M extends d{constructor({result:t,url:e}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${m(e)}`,`Response: ${y(t)}`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupResponseMalformedError"})}}class $ extends d{constructor({sender:t,to:e}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${e}`,`OffchainLookup sender address: ${t}`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupSenderMismatchError"})}}const j="0x556f1830",S={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function v(i,{blockNumber:t,blockTag:e,data:n,to:o}){const{args:c}=g({data:n,abi:[S]}),[r,u,a,s,p]=c,{ccipRead:f}=i,b=f&&typeof f?.request=="function"?f.request:q;try{if(!O(o,r))throw new $({sender:r,to:o});const l=await b({data:a,sender:r,urls:u}),{data:w}=await k(i,{blockNumber:t,blockTag:e,data:L([s,E([{type:"bytes"},{type:"bytes"}],[l,p])]),to:o});return w}catch(l){throw new R({callbackSelector:s,cause:l,data:n,extraData:p,sender:r,urls:u})}}async function q({data:i,sender:t,urls:e}){let n=new Error("An unknown error occurred.");for(let o=0;o<e.length;o++){const c=e[o],r=c.includes("{data}")?"GET":"POST",u=r==="POST"?{data:i,sender:t}:void 0;try{const a=await fetch(c.replace("{sender}",t).replace("{data}",i),{body:JSON.stringify(u),method:r});let s;if(a.headers.get("Content-Type")?.startsWith("application/json")?s=(await a.json()).data:s=await a.text(),!a.ok){n=new h({body:u,details:s?.error?y(s.error):a.statusText,headers:a.headers,status:a.status,url:c});continue}if(!x(s)){n=new M({result:s,url:c});continue}return s}catch(a){n=new h({body:u,details:a.message,url:c})}}throw n}export{q as ccipRequest,v as offchainLookup,S as offchainLookupAbiItem,j as offchainLookupSignature};
